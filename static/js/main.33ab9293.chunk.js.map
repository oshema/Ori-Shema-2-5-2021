{"version":3,"sources":["images/cloudSearch.png","redux/actions/currentWeatherActions.js","redux/actions/fiveDayForecastActions.js","redux/actions/favoritesActions.js","components/favoriteButton/favoriteButton.jsx","components/searchBar/searchItem.jsx","utilities/errorHandler.js","components/searchBar/searchBar.jsx","utilities/extractWeatherIcon.js","utilities/DynamicCardCssBackground.js","components/weatherCard/weatherCard.js","components/currentWeather/currentWeather.jsx","components/weatherForecast/forecastDay.jsx","components/weatherForecast/weatherForecast.jsx","pages/main/main.jsx","images/favorite_star.png","pages/favorites/favorites.jsx","components/navBar/navBar.jsx","App.js","redux/reducers/currentWeatherReducer.js","redux/reducers/fiveDayForecastReducer.js","redux/reducers/favoritesReducer.js","redux/reducers/rootReducer.js","redux/store.js","index.js"],"names":["fetchWeatherFailure","error","type","fetchWeatherData","locationKey","city","dispatch","a","axios","get","response","payload","data","location","key","Message","message","fetchForecastFailure","fetchForecastData","DailyForecasts","addFavorite","locationName","addFavoriteFailure","fetchFavoritesFailure","FavoriteButton","iconSize","useState","isFavorite","setIsFavorite","useDispatch","favoritesKeys","useSelector","state","favorites","locationKeys","useEffect","checkIfFavorite","keyToCheck","isKeyFevorite","includes","addOrRemoveFromFavorites","removeFavorite","getState","length","setTimeout","classes","makeStyles","emptyHeart","fontSize","color","fullHeart","useStyles","ButtonBase","onClick","className","SearchItem","country","clearList","theme","listItem","height","width","cursor","backgroundColor","palette","grey","maxWidth","ListItem","Divider","ErrorHandler","errorMessage","Alert","severity","AlertTitle","SearchBar","searchQuery","setSearchQuery","loading","setLoading","searchList","setSearchList","setError","autoCompleteAPI","query","API_KEY","console","log","API_CALL","extractedList","extractSearchList","map","result","Country","LocalizedName","Key","list","position","overflow","maxHeight","searchIcon","display","TextField","label","placeholder","variant","value","onChange","e","target","CircularProgress","size","ClickAwayListener","onClickAway","List","item","extractWeatherIcon","number","setCssOfWeather","temp","WeatherCard","props","temperature","info","imageURL","buttonSize","isFavoriteButton","clickable","history","useHistory","weatherCSS","setWeatherCSS","imgURL","setImgURL","url","cssBackground","card","marginTop","backgroundImage","marginLeft","favoriteCards","boxShadow","button","push","Card","src","alt","CurrentWeather","selectedWeather","currentWeather","weatherData","Temperature","Metric","Value","WeatherText","WeatherIcon","ForecastDay","day","night","date","dayTime","setDayTime","nightTime","setNightTime","dayOfTheWeek","setDayOfTheWeek","maxTemp","setMaxTemp","minTemp","setMinTemp","avgTemperature","setAvgTemperature","Icon","extractDayOfTheWeek","Maximum","Minimum","avgTemp","Math","round","forecastDate","Date","toDateString","split","IconPhrase","orientation","flexItem","WeatherForecast","forecastList","forecast","forecastData","index","Day","Night","Main","searceImg","Favorites","favoritesData","locationNames","favoritesDataPromises","err","Promise","all","favoritesDataList","isError","filter","starImage","favorite","NavBar","tooManyFavoritesError","limitError","to","App","exact","path","initialState","weatherReducer","action","forecastReducer","favoritesReducer","name","rootReducer","combineReducers","store","createStore","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.33ab9293.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/cloudSearch.f365180e.png\";","import axios from 'axios';\n\nexport const fetchWeatherRequest = () => {\n    return {\n        type: 'FETCH_WEATHER_REQUEST'\n    }\n}\n\nexport const fetchWeatherSuccess = (weatherData, location, key) => {\n    return {\n        type: 'FETCH_WEATHER_SUCCESS',\n        payload: {\n            data: weatherData,\n            location,\n            key\n        }\n    }\n}\n\nexport const fetchWeatherFailure = (error) => {\n    return {\n        type: 'FETCH_WEATHER_FAILURE',\n        error\n    }\n}\n\nexport const fetchWeatherData = (locationKey, city) => {\n    return async (dispatch) => {\n        try {\n            dispatch(fetchWeatherRequest())\n            const API_KEY = \"SL956ifEH5G6uGpeRoa4cKqomPiIvzeM\" //process.env.REACT_APP_WEATHER_API_KEY;\n            const response = await axios.get(`https://dataservice.accuweather.com/currentconditions/v1/${locationKey}?apikey=${API_KEY}`)\n            dispatch(fetchWeatherSuccess(response.data[0], city, locationKey))\n        }\n        catch (err) {\n            if (err.response)\n                dispatch(fetchWeatherFailure(err.response.data.Message))\n            else\n                dispatch(fetchWeatherFailure(err.message))\n        }\n    }\n} ","import axios from 'axios';\n\nexport const fetchForecastRequest = () => {\n    return {\n        type: 'FETCH_FORECAST_REQUEST'\n    }\n}\n\nexport const fetchForecastSuccess = (forecastData) => {\n    return {\n        type: 'FETCH_FORECAST_SUCCESS',\n        payload: forecastData,\n    }\n}\n\nexport const fetchForecastFailure = (error) => {\n    return {\n        type: 'FETCH_FORECAST_FAILURE',\n        error\n    }\n}\n\nexport const fetchForecastData = (locationKey) => {\n    return async (dispatch) => {\n        try {\n            dispatch(fetchForecastRequest())\n            const API_KEY = \"SL956ifEH5G6uGpeRoa4cKqomPiIvzeM\" //process.env.REACT_APP_WEATHER_API_KEY;\n            const response = await axios\n                .get(`https://dataservice.accuweather.com/forecasts/v1/daily/5day/${locationKey}?apikey=${API_KEY}&details=false&metric=true`)\n            dispatch(fetchForecastSuccess(response.data.DailyForecasts))\n        }\n        catch (err) {\n            if (err.response)\n                dispatch(fetchForecastFailure(err.response.data.Message))\n            else\n                dispatch(fetchForecastFailure(err.message))\n        }\n    }\n} ","import axios from 'axios';\n\nexport const addLocationToFavorites = (key, city) => {\n    return async (dispatch, getState) => {\n        if (getState().favorites.locationKeys.length > 4) {\n            dispatch(addFavoriteFailure(\"You can only have 5 favorites\"))\n            setTimeout(() => {\n                dispatch(addFavoriteFailure(\"\"))\n            }, 3000);\n        }\n        else\n            dispatch(addFavorite(key, city))\n    }\n}\n\nexport const addFavorite = (locationKey, locationName) => {\n    return {\n        type: 'ADD_FAVORITE',\n        payload: {\n            locationKey,\n            locationName\n        }\n    }\n}\n\nexport const removeFavorite = (locationKey, locationName) => {\n    return {\n        type: 'REMOVE_FAVORITE',\n        payload: {\n            locationKey,\n            locationName\n        }\n    }\n}\n\nexport const addFavoriteFailure = (error) => {\n    return {\n        type: 'ADD_FAVORITE_FAILURE',\n        error\n    }\n}\n\nexport const fetchFavoritesRequest = () => {\n    return {\n        type: 'FETCH_FAVORITES_REQUEST'\n    }\n}\n\nexport const fetchFavoritesSuccess = (favoritesData) => {\n    return {\n        type: 'FETCH_FAVORITES_SUCCESS',\n        payload: favoritesData\n    }\n}\n\nexport const fetchFavoritesFailure = (error) => {\n    return {\n        type: 'FETCH_FAVORITES_FAILURE',\n        error\n    }\n}\n\nexport const fetchFavoritesData = () => {\n    return async (dispatch, getState) => {\n        const favoritesKeys = getState().favorites.locationKeys\n        const API_KEY = \"SL956ifEH5G6uGpeRoa4cKqomPiIvzeM\" //process.env.REACT_APP_WEATHER_API_KEY;\n        dispatch(fetchFavoritesRequest())\n        const favoritesDataPromises = favoritesKeys.map(async key => {\n            try {\n                const response = await axios.get(`https://dataservice.accuweather.com/currentconditions/v1/${key}?apikey=${API_KEY}`)\n                return response.data[0]\n            }\n            catch (err) {\n                return { err }\n            }\n        })\n        const favoritesDataList = await Promise.all(favoritesDataPromises)\n        //Check for errors\n        const isError = favoritesDataList.filter(data => data.err)\n        if (isError.length === 0) {\n            dispatch(fetchFavoritesSuccess(favoritesDataList))\n        }\n        else {\n            if (isError[0].err.response)\n                dispatch(fetchFavoritesFailure(isError[0].err.response.data.Message))\n            else {\n                dispatch(fetchFavoritesFailure(isError[0].err.message))\n            }\n        }\n    }\n}\n","import React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { ButtonBase } from '@material-ui/core';\nimport { removeFavorite } from '../../redux/actions/favoritesActions';\nimport { addLocationToFavorites } from '../../redux/actions/favoritesActions';\nimport FavoriteBorderIcon from '@material-ui/icons/FavoriteBorder';\nimport FavoriteIcon from '@material-ui/icons/Favorite';\nimport { makeStyles } from '@material-ui/core/styles';\n\nfunction FavoriteButton({ locationKey, locationName, iconSize }) {\n\n    const [isFavorite, setIsFavorite] = useState(false)\n\n    const dispatch = useDispatch()\n    const favoritesData = useSelector(state => state.favorites)\n    const favoritesKeys = favoritesData.locationKeys\n\n    useEffect(() => {\n        checkIfFavorite(locationKey, favoritesKeys)\n    }, [locationKey, favoritesKeys])\n\n    const checkIfFavorite = (keyToCheck, favoritesKeys) => {\n        const isKeyFevorite = favoritesKeys.includes(keyToCheck);\n        if (isKeyFevorite)\n            setIsFavorite(true)\n        else\n            setIsFavorite(false)\n    }\n\n    const addOrRemoveFromFavorites = () => {\n        if (isFavorite)\n            dispatch(removeFavorite(locationKey, locationName))\n        else\n            dispatch(addLocationToFavorites(locationKey, locationName))\n    }\n\n    // Material UI Styling //\n    const useStyles = makeStyles({\n        emptyHeart: {\n            fontSize: iconSize,\n            color: \"rgb(128, 128, 128)\"\n        },\n        fullHeart: {\n            fontSize: iconSize,\n            color: \"rgb(233, 48, 88);\"\n        }\n    })\n\n    const classes = useStyles();\n    // Material UI Styling //\n\n    return (\n        <div>\n            <ButtonBase onClick={() => addOrRemoveFromFavorites()}>\n                {isFavorite ?\n                    <FavoriteIcon className={classes.fullHeart} />\n                    :\n                    <FavoriteBorderIcon className={classes.emptyHeart} />\n                }\n            </ButtonBase>\n        </div>\n    )\n}\n\nexport default FavoriteButton\n","import React from 'react';\nimport './searchItem.css';\nimport { useDispatch } from 'react-redux';\nimport { fetchWeatherData } from '../../redux/actions/currentWeatherActions';\nimport { fetchForecastData } from '../../redux/actions/fiveDayForecastActions';\nimport { makeStyles } from '@material-ui/core/styles';\nimport ListItem from '@material-ui/core/ListItem';\nimport ButtonBase from '@material-ui/core/ButtonBase';\nimport Divider from '@material-ui/core/Divider';\nimport FavoriteButton from '../favoriteButton/favoriteButton';\n\nfunction SearchItem({ city, country, locationKey, clearList }) {\n    const dispatch = useDispatch()\n\n    const fetchWeather = () => {\n        clearList('')\n        dispatch(fetchWeatherData(locationKey, city))\n        dispatch(fetchForecastData(locationKey))\n    }\n\n    // Material UI Styling //\n    const useStyles = makeStyles((theme) => ({\n        listItem: {\n            height: 45,\n            width: 570,\n            fontSize: \"15px\",\n            '&:hover': {\n                cursor: 'pointer',\n                backgroundColor: theme.palette.grey[100],\n            },\n            '@media (max-width: 900px)': {\n                maxWidth: 270,\n            },\n            '@media (max-width: 600px)': {\n                width: \"100%\",\n            },\n        },\n    }));\n\n    const classes = useStyles();\n    // Material UI Styling //\n\n    return (\n        <>\n            <div className=\"searchItemLayout\">\n                <ButtonBase onClick={() => fetchWeather()}>\n                    <ListItem className={classes.listItem}>\n                        <span>{`${country} / ${city}`}</span>\n                    </ListItem>\n                </ButtonBase>\n                <div className=\"favoriteButtonLayout\">\n                    <FavoriteButton locationKey={locationKey} locationName={city} />\n                </div>\n            </div>\n            <Divider />\n        </>\n    )\n}\n\nexport default SearchItem\n","import React from 'react'\nimport { Alert, AlertTitle } from '@material-ui/lab';\n\nfunction ErrorHandler({ errorMessage }) {\n    return (\n        <div>\n            <Alert severity=\"error\">\n                <AlertTitle>Error</AlertTitle>\n                <strong>{errorMessage}</strong>\n            </Alert>\n        </div>\n    )\n}\n\nexport default ErrorHandler\n","import React, { useEffect, useState } from 'react';\nimport './searchBar.css';\nimport SearchItem from './searchItem';\nimport axios from 'axios';\nimport { makeStyles } from '@material-ui/core/styles';\nimport ClickAwayListener from '@material-ui/core/ClickAwayListener';\nimport TextField from '@material-ui/core/TextField';\nimport SearchSharpIcon from '@material-ui/icons/SearchSharp';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport List from '@material-ui/core/List';\nimport { ButtonBase } from '@material-ui/core';\nimport ErrorHandler from '../../utilities/errorHandler';\n\nfunction SearchBar() {\n\n    const [searchQuery, setSearchQuery] = useState('')\n    const [loading, setLoading] = useState(false)\n    const [searchList, setSearchList] = useState('')\n    const [error, setError] = useState(\"\")\n\n    const autoCompleteAPI = async query => {\n        setSearchQuery(query)\n        const API_KEY = \"SL956ifEH5G6uGpeRoa4cKqomPiIvzeM\" //process.env.REACT_APP_WEATHER_API_KEY\n        console.log(\"test_api_deployed\", API_KEY)\n        const BASE_URL = \"https://dataservice.accuweather.com/locations/v1/cities/autocomplete\"\n        const API_CALL = `${BASE_URL}?q=${query}&apikey=${API_KEY}`\n        if (query.length > 1) {\n            setLoading(true)\n            try {\n                const response = await axios.get(API_CALL)\n                const extractedList = extractSearchList(response.data)\n                setSearchList(extractedList)\n            }\n            catch (err) {\n                if (err.response) {\n                    setError(err.response.data.Message)\n                    setTimeout(() => {\n                        setError(false)\n                    }, 3000);\n                }\n                else {\n                    setError(err.message)\n                    setTimeout(() => {\n                        setError(false)\n                    }, 3000);\n                }\n            }\n            setLoading(false)\n\n        }\n    }\n\n    const extractSearchList = (data) => {\n        return data.map(result => {\n            const country = result.Country.LocalizedName\n            const city = result.LocalizedName\n            const key = result.Key\n            return { country, city, key }\n        })\n    }\n\n    // Material UI Styling //\n    const useStyles = makeStyles(() => ({\n        list: {\n            position: \"absolute\",\n            width: '100%',\n            maxWidth: 600,\n            overflow: 'auto',\n            maxHeight: 135,\n            backgroundColor: \"rgba(148, 240, 240, 0.075);\",\n            '@media (max-width: 900px)': {\n                maxWidth: 300,\n                maxHeight: 100\n            },\n        },\n        searchIcon: {\n            fontSize: \"50px\",\n            '@media (max-width: 900px)': {\n                display: \"none\"\n            }\n        },\n    }));\n\n    const classes = useStyles();\n    // Material UI Styling //\n\n\n    return (\n        <div>\n            <div>\n                <div className=\"searchBarContainer\">\n                    <TextField\n                        className=\"searchBar\"\n                        label=\"What's The Weather In...\"\n                        placeholder=\"Search\"\n                        variant=\"outlined\"\n                        value={searchQuery}\n                        onChange={e => { autoCompleteAPI(e.target.value) }}\n                    />\n                    <ButtonBase className={classes.searchIcon} onClick={() => autoCompleteAPI(searchQuery)}>\n                        <SearchSharpIcon className={classes.searchIcon} />\n                    </ButtonBase>\n                </div>\n                {error ?\n                    <ErrorHandler errorMessage={error} />\n                    :\n                    loading ?\n                        <CircularProgress size={100} className=\"loading\" />\n                        :\n                        searchList &&\n                        <ClickAwayListener onClickAway={() => setSearchList('')}>\n                            <List className={classes.list} >\n                                {searchList.map(item =>\n                                    <SearchItem\n                                        key={item.key}\n                                        city={item.city}\n                                        country={item.country}\n                                        locationKey={item.key}\n                                        clearList={setSearchList}\n                                    />)}\n                            </List>\n                        </ClickAwayListener>\n                }\n            </div>\n        </div>\n    )\n}\n\nexport default SearchBar\n","\nexport const extractWeatherIcon = (number) => {\n    let imgURL = ''\n    if (number < 10)\n        imgURL = `https://developer.accuweather.com/sites/default/files/0${number}-s.png`\n    else\n        imgURL = `https://developer.accuweather.com/sites/default/files/${number}-s.png`\n    return imgURL\n}","export const setCssOfWeather = (temp) => {\n    //HOT\n    if (temp > 29)\n        return \"linear-gradient(to top, #fddb92 0%, #d1fdff 100%)\"\n    //WARM\n    else if (temp > 22 && temp < 30)\n        return \"linear-gradient(to top, #fff1eb 0%, #ace0f9 100%)\"\n    //COLD\n    else if (temp < 23 && temp > 12)\n        return \"linear-gradient(45deg, #93a5cf 0%, #e4efe9 100%)\"\n    //COLDER\n    else if (temp < 13 && temp > 0)\n        return \"linear-gradient(to top, #6a85b6 0%, #bac8e0 100%)\"\n    //FREEZING\n    else\n        return \"linear-gradient(to top, #dfe9f3 0%, white 100%)\"\n}","import React, { useEffect, useState } from 'react';\nimport './weatherCard.css'\nimport { useHistory } from 'react-router-dom';\nimport { useDispatch } from 'react-redux';\nimport { fetchWeatherData } from '../../redux/actions/currentWeatherActions';\nimport { fetchForecastData } from '../../redux/actions/fiveDayForecastActions';\nimport { extractWeatherIcon } from '../../utilities/extractWeatherIcon';\nimport { setCssOfWeather } from '../../utilities/DynamicCardCssBackground';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport FavoriteButton from '../favoriteButton/favoriteButton';\nimport { ButtonBase } from '@material-ui/core';\n\nfunction WeatherCard(props) {\n    const { location,\n        temperature,\n        info,\n        imageURL,\n        locationKey,\n        buttonSize,\n        isFavoriteButton = true,\n        clickable = false,\n    } = props\n\n    let history = useHistory();\n    const dispatch = useDispatch()\n\n    const [weatherCSS, setWeatherCSS] = useState(\"linear-gradient(to top, #fff1eb 0%, #ace0f9 100%)\")\n    const [imgURL, setImgURL] = useState('')\n\n\n    useEffect(() => {\n        const url = extractWeatherIcon(imageURL)\n        setImgURL(url)\n        const cssBackground = setCssOfWeather(temperature)\n        setWeatherCSS(cssBackground)\n    }, [imageURL, temperature])\n\n    const redirectFromFavorites = () => {\n        dispatch(fetchWeatherData(locationKey, location))\n        dispatch(fetchForecastData(locationKey))\n        let path = `/`;\n        history.push(path);\n    }\n\n    // Material UI Styling //\n    const useStyles = makeStyles({\n        card: {\n            marginTop: \"20px\",\n            width: \"250px\",\n            height: \"240px\",\n            backgroundImage: weatherCSS,\n            overflow: 'auto',\n            '@media (max-width: 900px)': {\n                width: \"auto\",\n                maxWidth: \"250px\",\n                maxHeight: \"150px\",\n                marginTop: \"80px\",\n                marginLeft: \"20px\"\n            }\n        },\n        favoriteCards: {\n            marginTop: \"20px\",\n            width: \"200px\",\n            height: \"240px\",\n            backgroundImage: weatherCSS,\n            overflow: 'auto',\n            '&:hover': {\n                boxShadow: '0 3px 5px 2px rgba(255, 105, 135, .3)'\n            },\n            '@media (max-width: 1000px)': {\n                width: \"150px\",\n            },\n            '@media (max-width: 750px)': {\n                height: \"75px\",\n            }\n        },\n        button: {\n            '&:hover': {\n                cursor: 'pointer',\n            },\n        }\n    })\n\n    const classes = useStyles();\n    // Material UI Styling //\n\n    return (\n        <div >\n            <>\n                {clickable ?\n                    <ButtonBase onClick={() => redirectFromFavorites()}>\n                        <Card className={classes.favoriteCards}>\n                            <div className=\"titleFavorite\">\n                                {`${location}`}\n                            </div>\n                            <div>\n                                <div className=\"tempAndIconLayout\">\n                                    <div className=\"tempFavorite\">\n                                        {`${temperature}\\u00B0`}\n                                    </div>\n                                    <div>\n                                        <img className=\"iconFavorite\" src={`${imgURL}`} alt={`${info}`} />\n                                    </div>\n                                </div>\n                                <div className=\"info\">\n                                    {info}\n                                </div>\n                            </div>\n                        </Card>\n                    </ButtonBase>\n                    :\n                    <Card className={classes.card}>\n                        <div className=\"weatherTitle\">\n                            {`${location}`}\n                        </div>\n                        <div>\n                            <div className=\"tempAndIconLayout\">\n                                <div className=\"temp\">\n                                    {`${temperature}\\u00B0`}\n                                </div>\n                                <div>\n                                    <img className=\"icon\" src={`${imgURL}`} alt={`${info}`} />\n                                </div>\n                            </div>\n                            <div className=\"info\">\n                                {info}\n                            </div>\n                        </div>\n                        {isFavoriteButton &&\n                            <div className=\"favoriteButton\">\n                                <FavoriteButton locationKey={locationKey} locationName={location} iconSize={buttonSize} />\n                            </div>\n                        }\n                    </Card>\n                }\n            </>\n        </div>\n    )\n}\n\nexport default WeatherCard\n","import React, { useEffect } from 'react';\nimport './currentWeather.css';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchWeatherData } from '../../redux/actions/currentWeatherActions';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport WeatherCard from '../weatherCard/weatherCard';\nimport ErrorHandler from '../../utilities/errorHandler';\n\nfunction CurrentWeather() {\n\n    const dispatch = useDispatch()\n    const selectedWeather = useSelector(state => state.currentWeather)\n    const { loading, weatherData, location, key, error } = selectedWeather;\n\n    //Set default forecast to Tel Aviv\n    useEffect(() => {\n        if (!key)\n            dispatch(fetchWeatherData(\"215854\", \"Tel Aviv\"))\n    }, [])\n\n    return (\n        <div>\n            {error ?\n                <ErrorHandler errorMessage={error} />\n                :\n                loading ?\n                    <CircularProgress size={200} color=\"secondary\" />\n                    :\n                    weatherData.length !== 0 &&\n                    (key ?\n                        <WeatherCard\n                            location={location}\n                            temperature={weatherData.Temperature.Metric.Value}\n                            info={weatherData.WeatherText}\n                            imageURL={weatherData.WeatherIcon}\n                            locationKey={key}\n                            buttonSize=\"48px\" />\n                        :\n                        <WeatherCard\n                            location={\"Tel Aviv\"}\n                            temperature={weatherData.Temperature.Metric.Value}\n                            info={weatherData.WeatherText}\n                            imageURL={weatherData.WeatherIcon}\n                            locationKey={\"215854\"}\n                            buttonSize=\"48px\" />\n                    )}\n        </div>\n    )\n}\n\nexport default CurrentWeather\n","import React, { useEffect, useState } from 'react';\nimport './forecastDay.css';\nimport { setCssOfWeather } from '../../utilities/DynamicCardCssBackground';\nimport { extractWeatherIcon } from '../../utilities/extractWeatherIcon';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport Divider from '@material-ui/core/Divider';\n\nfunction ForecastDay(props) {\n\n    const { day, night, temp, date } = props\n\n    const [dayTime, setDayTime] = useState('')\n    const [nightTime, setNightTime] = useState('')\n    const [dayOfTheWeek, setDayOfTheWeek] = useState('')\n    const [maxTemp, setMaxTemp] = useState('')\n    const [minTemp, setMinTemp] = useState('')\n    const [avgTemperature, setAvgTemperature] = useState('')\n    const [weatherCSS, setWeatherCSS] = useState(\"linear-gradient(to top, #fff1eb 0%, #ace0f9 100%)\")\n\n    useEffect(() => {\n        setDayTime(extractWeatherIcon(day.Icon))\n        setNightTime(extractWeatherIcon(night.Icon))\n        setDayOfTheWeek(extractDayOfTheWeek(date))\n        setMaxTemp(temp.Maximum.Value)\n        setMinTemp(temp.Minimum.Value)\n    }, [props])\n\n    useEffect(() => {\n        let avgTemp = (maxTemp + minTemp) / 2\n        avgTemp = Math.round(avgTemp * 10) / 10\n        setAvgTemperature(avgTemp)\n        const cssBackground = setCssOfWeather(avgTemp)\n        setWeatherCSS(cssBackground)\n    }, [maxTemp, minTemp])\n\n    const extractDayOfTheWeek = (forecastDate) => {\n        let newDateFormat = new Date(forecastDate).toDateString()\n        return newDateFormat.split(\" \")[0]\n    }\n\n    // Material UI Styling //\n    const useStyles = makeStyles({\n        card: {\n            marginTop: \"20px\",\n            maxWidth: \"250px\",\n            height: \"170px\",\n            backgroundImage: weatherCSS,\n            overflow: 'auto',\n            '@media (max-width: 1060px)': {\n                maxWidth: \"150px\"\n            }\n        }\n    })\n\n    const classes = useStyles();\n    // Material UI Styling //\n\n    return (\n        <div className=\"forecastCardLayout\">\n            <div className=\"dayTitle\">{dayOfTheWeek}</div>\n            <Card className={classes.card}>\n                <div className=\"ForecastsTemp\">{`${maxTemp}\\u00B0 - ${minTemp}\\u00B0`}</div>\n                <div className=\"minimizeForecastTemp\">{avgTemperature}</div>\n                <div className=\"nightAndDayLayout\">\n                    <div>\n                        <div>{`${day.IconPhrase}`}</div>\n                        <img src={`${dayTime}`} alt={`${day.IconPhrase}`} />\n                    </div>\n                    <Divider orientation=\"vertical\" flexItem={true} />\n                    <div className=\"nightInfo\">\n                        <div>{`${night.IconPhrase}`}</div>\n                        <img src={`${nightTime}`} alt={`${night.IconPhrase}`} />\n                    </div>\n                </div>\n            </Card>\n        </div>\n    )\n}\n\nexport default ForecastDay\n","import React, { useEffect } from 'react';\nimport './weatherForecast.css';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchForecastData } from '../../redux/actions/fiveDayForecastActions';\nimport ForecastDay from './forecastDay';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport ErrorHandler from '../../utilities/errorHandler';\n\nfunction WeatherForecast() {\n\n    const dispatch = useDispatch();\n    const forecastList = useSelector(state => state.forecast)\n    const { forecastData, loading, error } = forecastList;\n\n    useEffect(() => {\n        //Set default forecast to Tel Aviv\n        dispatch(fetchForecastData(\"215854\"))\n    }, [])\n\n    return (\n        (error ?\n            <ErrorHandler errorMessage={error} />\n            :\n            <div className=\"forecastLayout\">\n                {loading ?\n                    <CircularProgress size={200} color=\"secondary\" />\n                    :\n                    (forecastData.length != 0) &&\n                    forecastData.map((forecast, index) =>\n                        <ForecastDay\n                            key={index}\n                            day={forecast.Day}\n                            night={forecast.Night}\n                            temp={forecast.Temperature}\n                            date={forecast.Date}\n                        />)\n                }\n            </div>\n        )\n\n    )\n}\n\nexport default WeatherForecast\n","import React, { useEffect, useState } from 'react';\nimport './main.css';\nimport searceImg from '../../images/cloudSearch.png'\nimport SearchBar from '../../components/searchBar/searchBar';\nimport CurrentWeather from '../../components/currentWeather/currentWeather';\nimport WeatherForecast from '../../components/weatherForecast/weatherForecast';\n\n\nfunction Main() {\n\n    return (\n        <div className=\"mainImg\">\n            <div className=\"topHeroContainer\">\n                <div>\n                    <div className=\"searchLogoContainer\">\n                        <img className=\"searchImg\" src={searceImg} />\n                        <div>\n                            <div className=\"searchTitle\">\n                                Cloud Search\n                            </div>\n                            <div className=\"searchSubtitle\">\n                                Your way to get around the weather\n                            </div>\n                        </div>\n                    </div>\n                    <SearchBar />\n                </div>\n                <div>\n                    <CurrentWeather />\n                </div>\n            </div>\n            <WeatherForecast />\n        </div>\n    )\n}\n\nexport default Main;\n","export default __webpack_public_path__ + \"static/media/favorite_star.27cebb77.png\";","import React, { useEffect } from 'react';\nimport './favorites.css';\nimport starImage from '../../images/favorite_star.png';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchFavoritesData } from '../../redux/actions/favoritesActions';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport WeatherCard from '../../components/weatherCard/weatherCard';\nimport ErrorHandler from '../../utilities/errorHandler';\n\nfunction Favorites() {\n\n    const dispatch = useDispatch()\n    const state = useSelector(state => state.favorites)\n    const { favoritesData, locationKeys, locationNames, loading, error } = state;\n\n    useEffect(() => {\n        dispatch(fetchFavoritesData())\n    }, [])\n\n    return (\n        <div className=\"mainImg\">\n            <div>\n                <img className=\"starImage\" src={starImage} />\n            </div>\n            {error ?\n                <ErrorHandler errorMessage={error} />\n                :\n                <div className=\"favoritesItemsLayout\">\n                    {loading ?\n                        <CircularProgress size={200} color=\"secondary\" />\n                        :\n                        (favoritesData.length != 0) &&\n                        favoritesData.map((favorite, index) =>\n                            <WeatherCard\n                                key={locationKeys[index]}\n                                location={locationNames[index]}\n                                temperature={favorite.Temperature.Metric.Value}\n                                info={favorite.WeatherText}\n                                imageURL={favorite.WeatherIcon}\n                                locationKey={locationKeys[index]}\n                                isFavoriteButton={false}\n                                clickable={true}\n                            />\n                        )\n                    }\n                </div>\n            }\n        </div>\n    )\n}\n\nexport default Favorites\n","import React, { useState } from 'react'\nimport { useSelector } from 'react-redux';\nimport './navBar.css'\nimport { Link } from 'react-router-dom'\n\nfunction NavBar() {\n\n    const tooManyFavoritesError = useSelector(state => state.favorites.limitError)\n\n    return (\n        <div className=\"nav\">\n            <div className=\"manuContainer\">\n                <Link className=\"homeLink\" to=\"/\">Home</Link>\n                <Link className=\"favoritesLink\" to=\"/favorites\">Favorites</Link>\n                <span className=\"favoritesError\">{tooManyFavoritesError}</span>\n            </div>\n        </div>\n    )\n}\n\nexport default NavBar\n","import React from 'react';\nimport {\n  Switch,\n  Route,\n} from \"react-router-dom\";\nimport Main from './pages/main/main';\nimport Favorites from './pages/favorites/favorites';\nimport NavBar from './components/navBar/navBar';\n\n\nfunction App() {\n\n  return (\n    <div >\n      <NavBar />\n      <Switch>\n        <Route exact path=\"/\">\n          <Main />\n        </Route>\n        <Route path=\"/favorites\">\n          <Favorites />\n        </Route>\n      </Switch>\n    </div>\n  );\n}\n\nexport default App;\n","const initialState = {\n    loading: false,\n    weatherData: '',\n    location: '',\n    key: '',\n    error: ''\n}\n\nconst weatherReducer = (state = initialState, action) => {\n    switch (action.type) {\n        case 'FETCH_WEATHER_REQUEST':\n            return {\n                ...state,\n                loading: true\n            }\n        case 'FETCH_WEATHER_SUCCESS':\n            return {\n                ...state,\n                loading: false,\n                weatherData: action.payload.data,\n                location: action.payload.location,\n                key: action.payload.key,\n                error: \"\"\n            }\n        case 'FETCH_WEATHER_FAILURE':\n            return {\n                ...state,\n                loading: false,\n                weatherData: [],\n                location: '',\n                key: '',\n                error: action.error\n            }\n        default:\n            return state;\n    }\n}\n\nexport default weatherReducer;","const initialState = {\n    loading: false,\n    forecastData: [],\n    error: ''\n}\n\nconst forecastReducer = (state = initialState, action) => {\n    switch (action.type) {\n        case 'FETCH_FORECAST_REQUEST':\n            return {\n                ...state,\n                loading: true\n            }\n        case 'FETCH_FORECAST_SUCCESS':\n            return {\n                ...state,\n                loading: false,\n                forecastData: action.payload,\n                error: \"\"\n            }\n        case 'FETCH_FORECAST_FAILURE':\n            return {\n                ...state,\n                loading: false,\n                forecastData: [],\n                error: action.error\n            }\n        default:\n            return state;\n    }\n}\n\nexport default forecastReducer;","const initialState = {\n    loading: false,\n    favoritesData: [],\n    locationKeys: [],\n    locationNames: [],\n    error: '',\n    limitError: ''\n}\n\nconst favoritesReducer = (state = initialState, action) => {\n    switch (action.type) {\n        case 'ADD_FAVORITE':\n            return {\n                ...state,\n                locationKeys: [...state.locationKeys, action.payload.locationKey],\n                locationNames: [...state.locationNames, action.payload.locationName],\n                limitError: ''\n            }\n        case 'REMOVE_FAVORITE':\n            return {\n                ...state,\n                locationKeys: state.locationKeys.filter(key => action.payload.locationKey !== key),\n                locationNames: state.locationNames.filter(name => action.payload.locationName !== name),\n                limitError: ''\n            }\n        case 'ADD_FAVORITE_FAILURE':\n            return {\n                ...state,\n                limitError: action.error\n            }\n        case 'FETCH_FAVORITES_REQUEST':\n            return {\n                ...state,\n                loading: true\n            }\n        case 'FETCH_FAVORITES_SUCCESS':\n            return {\n                ...state,\n                loading: false,\n                favoritesData: action.payload,\n                error: \"\"\n            }\n        case 'FETCH_FAVORITES_FAILURE':\n            return {\n                ...state,\n                loading: false,\n                favoritesData: [],\n                error: action.error\n            }\n        default:\n            return state;\n    }\n}\n\nexport default favoritesReducer;","import weatherReducer from './currentWeatherReducer';\nimport forecastReducer from './fiveDayForecastReducer';\nimport favoritesReducer from './favoritesReducer'\nimport { combineReducers } from 'redux';\n\nconst rootReducer = combineReducers({\n    currentWeather: weatherReducer,\n    forecast: forecastReducer,\n    favorites: favoritesReducer\n})\n\nexport default rootReducer;","import { createStore, applyMiddleware } from 'redux';\nimport rootReducer from './reducers/rootReducer'\nimport thunk from 'redux-thunk';\nimport { composeWithDevTools } from 'redux-devtools-extension';\n\nconst store = createStore(\n    rootReducer,\n    composeWithDevTools(applyMiddleware(thunk))\n);\n\nexport default store","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter } from 'react-router-dom'\nimport './index.css';\nimport App from './App';\nimport store from './redux/store';\nimport { Provider } from 'react-redux';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <HashRouter>\n      <Provider store={store}>\n        <App />\n      </Provider>\n    </HashRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}